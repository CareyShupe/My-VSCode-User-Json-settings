{
  /*
      This is my selections using Visual Studio Code
      as a primary editor for Powershell scripts.
      My Visual Studio Code General Settings.
   */
  // I prefer my sidebar to the right. My code doesn't move
  "workbench.sideBar.location": "right",
  // My preference for me and my profiles.
  "workbench.settings.applyToAllProfiles": [
    "workbench.sideBar.location"
  ],
  // The gutter view is not for me. It's a waste of space.
  "editor.minimap.enabled": false,
  "workbench.colorTheme": "Default Dark+",
  "workbench.iconTheme": "vs-seti",
  "editor.dragAndDrop": true,
  "extensions.autoUpdate": true,
  "extensions.autoCheckUpdates": true, // If no typing. Since I use Git a lot I'm not worried about accidentally overwriting stuff
  "files.autoSave": "afterDelay",
  // 10000 is equal to 10 seconds.
  "files.autoSaveDelay": 10000,
  // Always remember unsaved files, I'll explicitly close them if I don't want them
  "files.hotExit": "onExitAndWindowClose",
  // Controls how lines should wrap.n
  "editor.wordWrap": "on",
  // Controls the indentation of wrapped lines.
  //  - none: No indentation. Wrapped lines begin at column 1.
  //  - same: Wrapped lines get the same indentation as the parent.
  //  - indent: Wrapped lines get +1 indentation toward the parent.
  //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
  "editor.wrappingIndent": "same",
  /*
   Controls whether the editor should automatically adjust the indentation when users type,
         paste, move or indent lines.
      - none: The editor will not insert indentation automatically.
      - keep: The editor will keep the current line's indentation.
      - brackets: The editor will keep the current line's indentation and honor language defined brackets.
      - advanced: The editor will keep the current line's indentation, honor language defined brackets and
         invoke special onEnterRules defined by languages.
      - full: The editor will keep the current line's indentation, honor language defined brackets,
         invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
    */
  "editor.autoIndent": "full",
  // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
  "editor.renderWhitespace": "all",
  "editor.renderControlCharacters": true,
  "files.trimTrailingWhitespace": true,
  "files.trimFinalNewlines": true,
  "files.autoGuessEncoding": true,
  //I use insiders and don't want to break stuff mid-work
  "update.enableWindowsBackgroundUpdates": false,
  //Follow the OS theme default. I prefer dark theme
  "window.autoDetectColorScheme": false,
  // Render vertical rulers after a certain number of monospace characters. Company standard file width
  "editor.rulers": [
    120
  ],
  // Zoom the font of the editor when using mouse wheel and holding `Ctrl`. I notice this option at work on Excede.
  "editor.mouseWheelZoom": true,
  // When enabled, the notifications for extension recommendations will not be shown.
  "extensions.ignoreRecommendations": true,
  // Enable that the selection with the mouse and keys is doing column selection.
  "editor.columnSelection": false,
  "window.newWindowDimensions": "maximized",
  //Hammers my system if I left a bunch of stuff open before. I'll open what i want
  "window.restoreWindows": "none",
  //I want Powershell Intellisense first
  "editor.snippetSuggestions": "top",
  // Controls whether an active snippet prevents quick suggestions.
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  //Easier for me to distinguish between multiple windows
  "window.title": "${dirty}${remoteName}${separator}${rootName}${separator}${activeEditorShort}${separator}${appName}",
  "window.titleSeparator": " | ",
  // CaskaydiaCove NF is Cascadia Code with fancy Nerd Font symbols and ligatures
  "editor.fontFamily": "Fira Code, Consolas, 'Courier New', monospace",
  // Controls the font family in the Debug Console.
  "debug.console.fontFamily": "default",
  // Configures font ligatures or font features.
  "editor.fontLigatures": true,
  // Controls the font size in pixels.
  "editor.fontSize": 14,
  "editor.wordBasedSuggestions": "currentDocument",
  // Characters that will be used as word separators when doing word related navigations or operations.
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
  "editor.accessibilitySupport": "off",
  "editor.autoClosingQuotes": "languageDefined",
  "editor.bracketPairColorization.enabled": true,
  "editor.bracketPairColorization.independentColorPoolPerBracketType": true,
  /*
      Controls whether the smooth caret animation should be enabled.
         - off: Smooth caret animation is disabled.
         - explicit: Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.
         - on: Smooth caret animation is always enabled.
    */
  "editor.cursorSmoothCaretAnimation": "on",
  // Control the cursor animation style.
  "editor.cursorBlinking": "smooth",
  // Enable scroll bars in both directions.
  "editor.scrollbar.vertical": "visible",
  "editor.scrollbar.horizontal": "visible",
  // Make the scroll bars actually thick enough to
  // be useful.
  "editor.scrollbar.verticalScrollbarSize": 15,
  "editor.scrollbar.horizontalScrollbarSize": 15,
  // Don't suggest stuff.
  "editor.suggest.showClasses": false,
  "editor.suggest.showConstants": false,
  "editor.suggest.showConstructors": false,
  "editor.suggest.showEnumMembers": false,
  "editor.suggest.showEnums": false,
  "editor.suggest.showEvents": false,
  "editor.suggest.showFields": false,
  // Hide most tooltips.
  "editor.hover.enabled": true,
  // Honor E.G. .gitignore
  "search.useGlobalIgnoreFiles": true,
  "editor.detectIndentation": true,
  "editor.foldingImportsByDefault": true,
  // Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "editor.fontWeight": "400",
  // Controls whether the editor should automatically format the pasted content.
  "editor.formatOnPaste": true,
  // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
  "editor.formatOnSave": true,
  // Controls whether the editor should automatically format the line after typing.
  "editor.formatOnType": true,
  // Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
  //  - file: Format the whole file.
  //  - modifications: Format modifications (requires source control).
  //  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
  "editor.formatOnSaveMode": "modifications",
  "editor.guides.highlightActiveBracketPair": true,
  "editor.guides.bracketPairs": "active",
  "editor.guides.bracketPairsHorizontal": true,
  "editor.guides.highlightActiveIndentation": true,
  "editor.guides.indentation": true,
  "editor.inlayHints.enabled": "offUnlessPressed",
  "editor.inlayHints.fontSize": 14,
  "editor.inlineSuggest.enabled": true,
  "editor.lineHeight": 22,
  "editor.letterSpacing": 0.5,
  "editor.insertSpaces": true,
  "editor.quickSuggestions": {
    "comments": "on",
    "other": "off",
    "strings": "off"
  },
  "editor.codeActionsOnSave": {
    "source.organizeImports": "always"
  },
  "editor.renderLineHighlight": "none",
  "editor.semanticTokenColorCustomizations": {
    "[Default Dark+]": {
      "enabled": true,
      "rules": {
        "punctuation.section.bracket.end.powershell": "#569CD6"
      }
    }
  },
  "editor.showFoldingControls": "always",
  "editor.stickyTabStops": true,
  "editor.suggest.localityBonus": true,
  "editor.suggest.preview": true,
  "editor.suggest.showStatusBar": true,
  "editor.suggestSelection": "first",
  "editor.tabCompletion": "on",
  "editor.tokenColorCustomizations": {
    "[Default Dark+ Experimental]": {
      "textMateRules": [
        {
          "scope": [
            "meta.attribute.powershell"
          ],
          "settings": {
            "foreground": "#9CDCFE"
          }
        },
        {
          "scope": [
            "variable.other.member"
          ],
          "settings": {
            "foreground": "#DCDCAA"
          }
        },
        {
          "scope": [
            "support.function.attribute.powershell",
            "storage.type.powershell",
            "variable.parameter.powershell"
          ],
          "settings": {
            "foreground": "#4ec9b0ff"
          }
        },
        {
          "scope": [
            "meta.hashtable.assignment.powershell"
          ],
          "settings": {
            "foreground": "#D4D4D4"
          }
        },
        {
          "scope": [
            "support.constant.variable.powershell",
            "support.constant.automatic.powershell",
            "keyword.control.using.powershell"
          ],
          "settings": {
            "foreground": "#569cd6"
          }
        },
        {
          "scope": [
            "punctuation.section.bracket.begin.powershell",
            "punctuation.section.bracket.end.powershell"
          ],
          "settings": {
            "foreground": "#569CD6"
          }
        }
      ]
    }
  },
  "editor.useTabStops": true,
  "editor.wordWrapColumn": 120,
  "explorer.copyRelativePathSeparator": "/",
  "explorer.fileNesting.enabled": true,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "explorer.fileNesting.patterns": {
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.ps1": "${capture}.tests.ps1",
    "*.psm1": "${capture}.tests.ps1, ${capture}.psd1",
    "*.ts": "${basename}.spec.${extname}, ${capture}.js, ${basename}.test.${extname}",
    "*.tsx": "${capture}.ts",
    "package.json": "package-lock.json, .npmrc, yarn.lock, .yarnrc, pnpm-lock.yaml",
    "tsconfig.json": "tsconfig.*.json"
  },
  "files.associations": {
    ".denoflare": "jsonc",
    "*.json": "jsonc",
    "*.ps1": "powershell"
  },
  /*
      Powershell Settings
   */
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "source": "PowerShell",
      "icon": "terminal-powershell"
    },
    "PowerShell with Profile": {
      "source": "PowerShell"
    },
    "Command Prompt": {
      "path": [
        "${env:windir}\\Sysnative\\cmd.exe",
        "${env:windir}\\System32\\cmd.exe"
      ],
      "args": [],
      "icon": "terminal-cmd"
    },
    "Git Bash": {
      "source": "Git Bash"
    }
  },
  //LANGUAGE SPECIFIC CHANGES
  // Powershell is the default with 'new Item'
  "files.defaultLanguage": "pwsh",
  "editor.language.brackets": [
    [
      "{",
      "}"
    ],
    [
      "(",
      ")"
    ],
    [
      "#region",
      "#endregion"
    ]
  ],
  "[powershell]": {
    "files.encoding": "utf8",
    "files.autoGuessEncoding": true,
    "editor.formatOnSave": true,
    "editor.parameterHints.enabled": false,
    "editor.defaultFormatter": "GitHub.copilot"
  },
  /*
      Terminal Settings

      Enable this experimental terminal Intellisense suggestions for supported shells (PowerShell) when `terminal.integrated.shellIntegration.enabled` is set to 'true'.
   */
  "terminal.integrated.suggest.enabled": true,
  // Controls which built-in completions are activated. This setting can cause conflicts if custom shell completions are configured in the shell profile.
  "terminal.integrated.suggest.builtinCompletions": {
    "pwshCode": true,
    "pwshGit": true
  },
  // The minimum contrast ratio feature can cause colors to not be displayed as expected.
  "terminal.integrated.minimumContrastRatio": 1,
  "terminal.integrated.scrollback": 10000,
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.fontFamily": "'monospace'",
  "terminal.integrated.fontSize": 14,
  "terminal.integrated.enableImages": true,
  "terminal.integrated.gpuAcceleration": "auto",
  /*
      Git and GitHub Settings
   */
  "git.openRepositoryInParentFolders": "always",
  "git.enableSmartCommit": true,
  "git.autofetch": true,
  "workbench.activityBar.location": "top",
  "security.workspace.trust.untrustedFiles": "open",
  "terminal.external.windowsExec": "C:\\Program Files\\PowerShell\\7",
  "terminal.integrated.automationProfile.windows": {
    "path": "C:\\Users\\Carey.Shupe\\Documents\\PowerShell"
  },
  "editor.unicodeHighlight.nonBasicASCII": false,
  "terminal.explorerKind": "external",
  "json.schemaDownload.enable": false,
  "window.openFilesInNewWindow": "on",
  "workbench.startupEditor": "newUntitledFile",
  "workbench.editor.enablePreview": false,
  "editor.inlineSuggest.showToolbar": "always",
  "editor.inlineSuggest.syntaxHighlightingEnabled": true,
  "settingsSync.ignoredSettings": [
    "editor.inlineSuggest.syntaxHighlightingEnabled"
  ]
}